trigger:
  branches:
    include:
      - main

pool:
  name: $(agent_pool_name)

parameters:
  - name: environ
    displayName: Environment
    type: string
    values:
      - prod
      - dev
    default: dev

variables:
  # - group: 'medfast-global-vars'
  - ${{ if eq(parameters.environ, 'dev') }}:
    - group: 'medfast-global-vars-dev'
  - ${{ if eq(parameters.environ, 'prod') }}:
    - group: 'medfast-global-vars-prod'
  - name: tag
    value: $(Build.BuildId)

stages:
  - stage: Test
    jobs:
      - job: RunTests
        steps:
        - task: JavaToolInstaller@0
          inputs:
            versionSpec: '17'
            jdkArchitectureOption: 'x64'
            jdkSourceOption: 'PreInstalled'

        - task: Gradle@3
          inputs:
            gradleWrapperFile: 'gradlew'
            javaHomeOption: 'JDKVersion'
            jdkVersionOption: '1.17'
            jdkArchitectureOption: 'x64'
            publishJUnitResults: true
            testResultsFiles: '**/TEST-*.xml'
            tasks: 'test'
            options: '--no-daemon'


  - stage: Build
    dependsOn: Test
    jobs:
      - job: BuildAndPushImages
        steps:
        # - script: |
        #     # Install Docker
        #     curl -fsSL https://get.docker.com -o get-docker.sh
        #     sudo sh get-docker.sh

        #     sudo systemctl start docker
        #     sudo systemctl enable docker

        #     sudo chmod 666 /var/run/docker.sock
        #     sudo usermod -aG docker $USER

        #     # Verify Docker is running
        #     sudo docker ps || (echo "Docker daemon not running" && exit 1)
        #   displayName: 'Setup Docker'
        - task: Bash@3
          inputs:
            targetType: 'filePath'
            filePath: '$(System.DefaultWorkingDirectory)/ci-cd/scripts/install_docker.sh'
            failOnStderr: true
          
        - task: Docker@2
          displayName: Build and publish frontend image to Azure Container Registry
          inputs:
            command: buildAndPush
            containerRegistry: $(docker_acr_service_connection)
            repository: 'medfast-frontend'
            dockerfile: 'medfast-fe/Dockerfile'
            tags: |
              $(tag)
              latest

        - task: Docker@2
          displayName: Build and publish backend image to Azure Container Registry
          inputs:
            command: buildAndPush
            containerRegistry: $(docker_acr_service_connection)
            repository: 'medfast-backend'
            dockerfile: 'medfast-be/Dockerfile'
            # buildArguments: "--no-cache"
            tags: |
              $(tag)
              latest

  - stage: Deploy
    dependsOn: Build
    jobs:
      - job: DeployAKS
        steps:
        - task: Bash@3
          inputs:
            targetType: 'filePath'
            filePath: '$(System.DefaultWorkingDirectory)/ci-cd/scripts/retrieve_tf_vars.sh'
            arguments: '$(tf_vars_file_name)'
            failOnStderr: true
          env:
            SYSTEM_DEFAULT_WORKINGDIRECTORY: $(System.DefaultWorkingDirectory)
            TF_VAR_postgres_server_admin_passwd: $(TF_VAR_postgres_server_admin_passwd) # Required to map secret to env manually

        - task: TerraformInstaller@1
          displayName: 'Install Terraform'
          inputs:
            terraformVersion: '1.10.0' 

        - task: TerraformTaskV4@4
          displayName: 'Terraform Init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: $(arm_service_connection)
            backendAzureRmResourceGroupName: $(TF_VAR_resource_group_name)
            backendAzureRmStorageAccountName: $(TF_VAR_storage_account_name)
            backendAzureRmContainerName: $(TF_VAR_storage_container_name)
            backendAzureRmKey: $(TF_VAR_tf_state_file)
            workingDirectory: '$(System.DefaultWorkingDirectory)/infra/tf/app-cluster'

        - task: TerraformTaskV4@4
          displayName: 'Terraform Validate'
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/infra/tf/app-cluster'

        - task: TerraformTaskV4@4
          displayName: 'Terraform Plan'
          inputs:
            provider: 'azurerm'
            environmentServiceNameAzureRM: $(arm_service_connection)
            command: 'plan'
            commandOptions: '-out=main.tfplan -input=false --var-file=$(System.DefaultWorkingDirectory)/$(tf_vars_file_name)'
            workingDirectory: '$(System.DefaultWorkingDirectory)/infra/tf/app-cluster'

        - task: TerraformTaskV4@4
          displayName: 'Terraform Apply'
          inputs:
            provider: 'azurerm'
            environmentServiceNameAzureRM: $(arm_service_connection)
            command: 'apply'
            commandOptions: '-auto-approve main.tfplan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/infra/tf/app-cluster'

      - deployment: DeployAppBackend
        dependsOn: DeployAKS
        environment: medfast-dev
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubectlInstaller@0
                  displayName: Install Kubectl
                  inputs:
                    kubectlVersion: 'latest'

                - task: HelmInstaller@1
                  displayName: Install Helm
                  inputs: 
                    helmVersionToInstall: '3.16.3'

                - task: HelmDeploy@1
                  displayName: Deploy Backend Helm Chart
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscription: $(arm_service_connection)
                    azureResourceGroup: $(TF_VAR_resource_group_name)
                    kubernetesCluster: $(TF_VAR_cluster_name)
                    command: 'upgrade'
                    chartType: FilePath
                    chartPath: '$(System.DefaultWorkingDirectory)/infra/medfast-charts/backend-chart'
                    releaseName: $(helm_be_release_name)
                    install: true
                    arguments: "--force --cleanup-on-fail --debug --atomic"

      - deployment: DeployAppFrontend
        dependsOn: DeployAKS
        environment: medfast-dev
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubectlInstaller@0
                  displayName: Install Kubectl
                  inputs:
                    kubectlVersion: 'latest'

                - task: HelmInstaller@1
                  displayName: Install Helm
                  inputs: 
                    helmVersionToInstall: '3.16.3'

                - task: HelmDeploy@1
                  displayName: Deploy Frontend Helm Chart
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscription: $(arm_service_connection)
                    azureResourceGroup: $(TF_VAR_resource_group_name)
                    kubernetesCluster: $(TF_VAR_cluster_name)
                    command: 'upgrade'
                    chartType: FilePath
                    chartPath: '$(System.DefaultWorkingDirectory)/infra/medfast-charts/frontend-chart'
                    releaseName: $(helm_fe_release_name)
                    install: true
                    arguments: "--force --cleanup-on-fail --debug --atomic"
    