trigger:
  branches:
    include:
      - main

pool:
  name: $(agent_pool_name)

parameters:
  - name: environ
    displayName: Environment
    type: string
    values:
      - prod
      - dev
    default: dev

variables:
  - group: 'medfast-global-vars'
  - name: resource_group_name  
    ${{ if eq(parameters.environ, 'dev') }}:
      value: 'medfast-rg-dev'
    ${{ if eq(parameters.environ, 'prod') }}:
      value: 'medfast-rg-prod'
  - name: tag
    value: $(Build.BuildId)

stages:
  - stage: Build
    jobs:
      - job: BuildFrontend
        steps:
        - script: |
            # Add Docker's official GPG key:
            sudo apt-get update
            sudo apt-get install ca-certificates curl
            sudo install -m 0755 -d /etc/apt/keyrings
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            sudo chmod a+r /etc/apt/keyrings/docker.asc

            # Add the repository to Apt sources:
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update

            sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          displayName: 'Setup Docker'

        - task: Docker@2
          displayName: Build and publish frontend image to Azure Container Registry
          inputs:
            command: buildAndPush
            containerRegistry: $(docker_acr_service_connection)
            repository: 'medfast-frontend'
            dockerfile: 'medfast-fe/Dockerfile'
            tags: |
              $(tag)

      - job: BuildBackend
        steps:

        - task: Docker@2
          displayName: Build and publish backend image to Azure Container Registry
          inputs:
            command: buildAndPush
            containerRegistry: $(docker_acr_service_connection)
            repository: 'medfast-backend'
            dockerfile: 'medfast-be/Dockerfile'
            tags: |
              $(tag)

  - stage: Deploy
    jobs:
      - job: DeployAKS
        steps:
        - task: TerraformInstaller@1
          displayName: 'Install Terraform'
          inputs:
            terraformVersion: '1.10.0' 

        - task: TerraformTaskV4@4
          displayName: 'Terraform Init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: $(arm_service_connection)
            backendAzureRmResourceGroupName: $(resource_group_name)
            backendAzureRmStorageAccountName: $(storage_account_name)
            backendAzureRmContainerName: $(storage_container_name)
            backendAzureRmKey: $(tf_state_file)
            workingDirectory: '$(System.DefaultWorkingDirectory)/infra/tf/app-cluster'

        # - task: TerraformTaskV4@4
        #   displayName: 'Terraform Destroy'
        #   inputs:
        #     provider: 'azurerm'
        #     environmentServiceNameAzureRM: $(arm_service_connection)
        #     command: 'destroy'
        #     commandOptions: '-auto-approve --var-file=$(System.DefaultWorkingDirectory)/infra/tf/dev.tfvars'
        #     workingDirectory: '$(System.DefaultWorkingDirectory)/infra/tf/app-cluster'

        - task: TerraformTaskV4@4
          displayName: 'Terraform Validate'
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/infra/tf/app-cluster'

        - task: TerraformTaskV4@4
          displayName: 'Terraform Plan'
          inputs:
            provider: 'azurerm'
            environmentServiceNameAzureRM: $(arm_service_connection)
            command: 'plan'
            commandOptions: '-out=main.tfplan -input=false --var-file=$(System.DefaultWorkingDirectory)/infra/tf/dev.tfvars'
            workingDirectory: '$(System.DefaultWorkingDirectory)/infra/tf/app-cluster'

        - task: TerraformTaskV4@4
          displayName: 'Terraform Apply'
          inputs:
            provider: 'azurerm'
            environmentServiceNameAzureRM: $(arm_service_connection)
            command: 'apply'
            commandOptions: '-auto-approve main.tfplan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/infra/tf/app-cluster'

      - deployment: DeployApp
        dependsOn: DeployAKS
        environment: medfast-dev
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubectlInstaller@0
                  displayName: Install Kubectl
                  inputs:
                    kubectlVersion: 'latest'

                - task: HelmInstaller@1
                  displayName: Install Helm
                  inputs: 
                    helmVersionToInstall: '3.16.3'

                - task: HelmDeploy@1
                  displayName: Deploy Helm Chart
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscription: $(arm_service_connection)
                    azureResourceGroup: $(resource_group_name)
                    kubernetesCluster: $(cluster_name)
                    command: 'upgrade'
                    chartType: FilePath
                    chartPath: '$(System.DefaultWorkingDirectory)/infra/medfast-chart'
                    releaseName: $(helm_release_name)
                    install: true
                    arguments: "--atomic --force --cleanup-on-fail --debug"
    
